// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Add binaryTargets for AWS Lambda (Amplify's runtime)
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output        = "../generated/prisma/"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  foods     Food[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  calories         Float?
  protein          Float?
  fat              Float?
  carbohydrates    Float?
  fiber            Float?
  sugar            Float?
  foodServingUnits FoodServingUnit[]
  servingUnits     ServingUnit[]
  category         Category?         @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Meal             Meal?             @relation(fields: [mealId], references: [id])
  mealId           Int?
  MealFood         MealFood[]
}

model ServingUnit {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  foodServingUnit FoodServingUnit[]
  food            Food?             @relation(fields: [foodId], references: [id])
  foodId          Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MealFood        MealFood[]
}

model FoodServingUnit {
  id            Int         @id @default(autoincrement())
  food          Food        @relation(fields: [foodId], references: [id])
  servingUnit   ServingUnit @relation(fields: [servingUnitId], references: [id])
  grams         Float?
  foodId        Int
  servingUnitId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Meal {
  id        Int        @id @default(autoincrement())
  dateTime  DateTime
  foods     Food[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  mealFoods MealFood[]
}

model MealFood {
  id            Int         @id @default(autoincrement())
  food          Food        @relation(fields: [foodId], references: [id])
  meal          Meal        @relation(fields: [mealId], references: [id])
  foodId        Int
  mealId        Int
  amount        Float
  servingUnit   ServingUnit @relation(fields: [servingUnitId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  servingUnitId Int
}

/**
 * ────────────────────────────────
 * USER
 * ────────────────────────────────
 */
model User {
  id            Int          @id @default(autoincrement())
  name          String
  email         String       @unique
  password      String
  role          Role         @default(USER)
  meals         Meal[]
  workoutPlan   WorkoutPlan? // Inverse side – no fields/references
  workoutPlanId Int?         @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([workoutPlanId])
}

enum Role {
  USER
  ADMIN
}

/**
 * ────────────────────────────────
 * WORKOUTS & EXERCISES
 * ────────────────────────────────
 */
model WorkoutPlan {
  id        Int       @id @default(autoincrement())
  name      String
  user      User?     @relation(fields: [userId], references: [id]) // Owns FK
  userId    Int?      @unique
  workouts  Workout[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Workout {
  id             Int               @id @default(autoincrement())
  name           String
  caloriesBurned Int? // optional total burn
  workoutPlan    WorkoutPlan?      @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId  Int?
  exercises      WorkoutExercise[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

/**
 * ───── Base exercise (shared name / description) ─────
 */
model Exercise {
  id               Int                    @id @default(autoincrement())
  name             String                 @unique
  description      String?
  equipment        EquipmentAvailability?
  targetMuscles    Muscles[]
  targetJoints     Joints[]
  // Variations of this base exercise
  variations       ExerciseVariation[]
  // Direct usage (when a variation is not needed)
  workoutExercises WorkoutExercise[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
}

/**
 * ───── Concrete variation (Barbell Curl, Dumbbell Curl, …) ─────
 */
model ExerciseVariation {
  id              Int               @id @default(autoincrement())
  baseExercise    Exercise          @relation(fields: [baseExerciseId], references: [id])
  baseExerciseId  Int
  weightVariation WeightVariation
  grip            Grips? // optional – many exercises don’t need a grip
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  WorkoutExercise WorkoutExercise[]

  @@unique([baseExerciseId, weightVariation, grip])
}

/**
 * ───── What the user actually performed in a workout ─────
 */
model WorkoutExercise {
  id                      Int                @id @default(autoincrement())
  workout                 Workout            @relation(fields: [workoutId], references: [id])
  // Either a base exercise (no variation) OR a concrete variation
  exercise                Exercise?          @relation(fields: [exerciseId], references: [id])
  exerciseId              Int?
  variation               ExerciseVariation? @relation(fields: [variationId], references: [id])
  variationId             Int?
  sets                    Int
  reps                    Int
  weight                  Float? // kg / lbs
  estimatedCompletionTime Int? // seconds
  stress                  WorkoutStress?
  workoutId               Int
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt

  @@unique([workoutId, exerciseId, variationId, sets, reps])
}

/**
 * ────────────────────────────────
 * ENUMS
 * ────────────────────────────────
 */

enum MuscleGroup {
  ARMS
  BACK
  CHEST
  CORE
  FRONT_LEGS
  BACK_LEGS
}

enum EquipmentAvailability {
  BODYWEIGHT
  FREEWEIGHTS
  CABLES
  MACHINES
  ENHANCED_BODYWEIGHT
  GYM
}

enum Joints {
  WRISTS
  ELBOWS
  SHOULDERS
  NECK
  HIPS_WAIST
  KNEES
  ANKLES
}

enum Grips {
  CLOSE_GRIP
  WIDE_GRIP
  HAMMER_GRIP
  PALM_UP
  PALM_DOWN
}

enum Muscles {
  BICEPS
  TRICEPS
  TOP_FOREARMS
  BACK_FOREARMS
  FRONT_SHOULDERS
  CENTER_SHOULDERS
  BACK_SHOULDERS
  CHEST
  TRAPS
  UPPER_BACK
  LOWER_BACK
  HIPS
  UPPER_ABS
  CENTER_ABS
  LOWER_ABS
  OBLIQUES
  QUADS
  ASS
  BACK_CALVES
  FRONT_CALVES
  HAMSTRINGS
  HANDS
  NECK
}

enum WeightType {
  HEAVY_WEIGHT
  MEDIUM_WEIGHT
  ENHANCED_WEIGHT
}

enum WeightVariation {
  BARBELL
  DUMBELL
  CABLE
  BODY
}

enum WorkoutStress {
  MUSCLE_STRENGTH
  MUSCLE_SIZE
  MUSCLE_ENDURANCE
  JOINT_STRENGTH
  JOINT_SIZE
  JOINT_ENDURANCE
  CARDIO
  FLEXIBILITY
  WARMUP
}
